# BUILD FILE FOR UNIT-TESTS and SLIDE for CSHARP-UNIT-TEST INTRO-SESSION.

PROJDIR := $(realpath $(CURDIR))

# set to '--vb' for debug.
VERBOSE=

# set to null ("") to show all cmds executed always.
HIDE=@

######################
### SLIDE SECTION ###
######################

# generate slides using a three pass pre-process approach.
# 1. tpp - custom script to perform various substitutions - including bash cmd output.
# 2. then run marp on the tpp output.
# 3. then move the marp output to the target-output dir.

# search path for pre-requisite files for slide-generation.
VPATH=$(SLIDES_SRC)

# input dir for src files to generate slide targets.
SLIDES_SRC = $(PROJDIR)/SLIDES

# target output dir.
SLIDES_TARGET_DIR = $(PROJDIR)/HTML-SLIDE-PRESENTATION

# setup up overall target - all named-slides in target output dir.
SLIDES_NAMES=tdd-csharp.html 
SLIDES_IMAGES=TDD-CMD-OUT.png TDD.png
SLIDES=$(foreach target, $(SLIDES_NAMES) $(SLIDES_IMAGES), $(SLIDES_TARGET_DIR)/$(target))

# build rules and targets
.PHONY: slides
.SUFFIXES: .tdd .marp .html

## DEFAULT TARGET ##
slides: $(SLIDES)

# generate .marp files using the .tpp equivalents as input.
%.marp: %.tpp
	tpp $(VERBOSE) $< > $@

# build a .html file by running marp on the equivalent .marp 'input' file.
%.html:	%.marp
	marp $<

# to 'build' a slide (html) file in the target dir, move the local copy generated by previous rule.
$(SLIDES_TARGET_DIR)/%.html: %.html
	mkdir -p $(SLIDES_TARGET_DIR)
	mv $< $@

# to 'build' an image (png) file in the target dir, just copy from slide src dir.
$(SLIDES_TARGET_DIR)/%.png:	$(SLIDES_SRC)/%.png
	cp $< $@

###########################
### SOURCE CODE SECTION ###
###########################

SOURCE_DIR := $(PROJDIR)/SRC	

DNC=dnclean
DNT=dotnet test

.PHONY: clean test 

test::
	$(HIDE)cd $(SOURCE_DIR); echo "running tests in: $$(pwd)"; eval $(DNT);


#####################
### GENERIC RULES ###
#####################

all: 	slides test

clean::
	cd $(SOURCE_DIR); eval $(DNC);
	rm -f $(SLIDES)

