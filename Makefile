# BUILD FILE FOR UNIT-TESTS and SLIDES (PRESENTATION) for CSHARP-UNIT-TEST INTRO-SESSION.
default-target: all

PROJDIR := $(realpath $(CURDIR))

SLIDES_SRC := 			$(PROJDIR)/SRC/SLIDES-SRC
SLIDES_OUTPUT_DIR := 	$(PROJDIR)/HTML-SLIDE-PRESENTATION-XDIR
EXERCISE_OUTPUT_SRC :=	$(PROJDIR)/EXERCISE-SRC-XDIR
CODE_SRC := 			$(PROJDIR)/SRC/CODE-SRC

# set to '--vb' for debug.
VERBOSE=
HIDE=@
VPATH=$(SLIDES_SRC) $(CODE_SRC)

######################
### SLIDE SECTION ###
######################
# generate slides using a three pass pre-process approach.
# 1. tpp - custom script to perform various substitutions - including bash cmd output.
# 2. then run marp on the tpp output.
# 3. then move the marp output to the target-output dir.

# input dir for src files to generate slide targets.
# setup up overall target - all named-slides in target output dir.
SLIDES_NAMES=tdd-csharp.html 
SLIDES_IMAGES=TDD-CMD-OUT.png TDD.png
SLIDES=$(foreach target, $(SLIDES_NAMES) $(SLIDES_IMAGES), $(SLIDES_OUTPUT_DIR)/$(target))

# build rules and targets
slides: $(SLIDES)

# generate .marp files using the .tpp equivalents as input.
%.marp: %.tpp
	tpp $(VERBOSE) $< > $@

# build a .html file by running marp on the equivalent .marp 'input' file.
%.html:	%.marp
	marp $<

# to 'build' a slide (html) file in the target dir, move the local copy generated by previous rule.
$(SLIDES_OUTPUT_DIR)/%.html: %.html
	mkdir -p $(SLIDES_OUTPUT_DIR)
	mv $< $@

# to 'build' an image (png) file in the target dir, just copy from slide src dir.
$(SLIDES_OUTPUT_DIR)/%.png:	$(SLIDES_SRC)/%.png
	cp $< $@

###############################
### EXERCISE SOURCE SECTION ###
### material for exercises  ###
###############################
EX1_DIR :=		$(EXERCISE_OUTPUT_SRC)/EXERCISE-1
EX2_DIR :=		$(EXERCISE_OUTPUT_SRC)/EXERCISE-2

EX1_SRC :=		StockItem StockRepo.Tests
EX2_SRC :=		StockItem StockRepo StockRepo.Tests

exercise1:	$(EX1_SRC)
	mkdir -p $(EX1_DIR)
	cp -r $^ $(EX1_DIR)

exercise2: 	$(EX2_SRC)
	mkdir -p $(EX2_DIR)
	cp -r $^ $(EX2_DIR)

exercises: exercise1 exercise2

###########################
### SOURCE CODE SECTION ###
###########################


DNC=dnclean
DNT=dotnet test

.PHONY: clean test 

test::
	$(HIDE)cd $(CODE_SRC); echo "running tests in: $$(pwd)"; eval $(DNT);


#####################
### GENERIC RULES ###
#####################

all: 	slides exercises test

clean::
	cd $(CODE_SRC); eval $(DNC);
	rm -f $(SLIDES)
	rm -f $(EXERCISE_OUTPUT_SRC)

